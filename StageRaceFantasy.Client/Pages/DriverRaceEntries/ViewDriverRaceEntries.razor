@page "/races/{raceId:int}/entries"

@using StartAndPark.Application

@inject HttpClient httpClient
@inject IJSRuntime js

@if (race == null || vm == null)
{
    <MatBody1 Style="font-weight: bolder"><em>Loading...</em></MatBody1>
}
else
{
    <MatHeadline2>@race.Name</MatHeadline2>
    <MatHeadline4>Race Entries</MatHeadline4>

    if (vm.Entries.Count == 0)
    {
        <p>No drivers found.</p>
    }
    else
    {
        <MatTable Items="@vm.Entries"
                  FilterByColumnName="DriverLastName"
                  ShowPaging="false"
                  PageSize="int.MaxValue"
                  Striped="true">
            <MatTableHeader>
                <th>Id</th>
                <th>First Name</th>
                <th>Last Name</th>
                <th>Car Number</th>
                <th></th>
            </MatTableHeader>
            <MatTableRow>
                <td>@context.DriverId</td>
                <td>@context.DriverFirstName</td>
                <td>@context.DriverLastName</td>
                <td>
                    @if (context.IsEntered)
                    {
                        <MatTextField Value="@context.CarNumber" ValueChanged="@((string newCarNumber) => context.CarNumber = newCarNumber)" OnFocusOut=@(() => UpdateRaceEntry(context.DriverId))></MatTextField>
                    }
                </td>
                <td>
                    <MatCheckbox Value="@context.IsEntered" ValueChanged="@((bool newIsEntered) => newIsEntered ? EnterDriver(context.DriverId) : WithdrawDriver(context.DriverId))" />
                </td>
            </MatTableRow>
        </MatTable>

        <MatButton OnClick="@SaveUpdates" Disabled="@disableSave">Save Updates</MatButton>
    }
}

@code {
    [Parameter] public int raceId { get; set; }

    private Race race;
    private GetAllDriverRaceEntriesVm vm;
    private List<int> modifiedDriverIds;
    private bool disableSave;

    protected override async Task OnInitializedAsync()
    {
        race = await httpClient.GetFromJsonAsync<Race>($"api/races/{raceId}");
        vm = await httpClient.GetFromJsonAsync<GetAllDriverRaceEntriesVm>($"api/races/{raceId}/entries");
        modifiedDriverIds = new List<int>();
    }

    async Task EnterDriver(int driverId)
    {
        var raceEntry = vm.Entries.First(x => x.DriverId == driverId);
        raceEntry.IsEntered = true;

        var addRaceEntryDto = new CreateDriverRaceEntryDto()
        {
            DriverId = driverId,
            RaceId = raceId,
        };

        await httpClient.PostAsJsonAsync($"api/races/{raceId}/entries", addRaceEntryDto);
        await OnInitializedAsync();
    }

    async Task WithdrawDriver(int driverId)
    {
        var raceEntry = vm.Entries.First(x => x.DriverId == driverId);
        raceEntry.IsEntered = false;

        await httpClient.DeleteAsync($"api/races/{raceId}/entries/{driverId}");
        modifiedDriverIds.Remove(driverId);

        await OnInitializedAsync();
    }

    void UpdateRaceEntry(int driverid)
    {
        var raceEntry = vm.Entries.First(x => x.DriverId == driverid);

        if (modifiedDriverIds.Contains(driverid)) return;

        modifiedDriverIds.Add(driverid);
    }

    async Task SaveUpdates()
    {
        disableSave = true;

        foreach (int modifiedDriverId in modifiedDriverIds)
        {
            var raceEntry = vm.Entries.FirstOrDefault(x => x.DriverId == modifiedDriverId);

            var update = new UpdateDriverRaceEntryCommand(
                raceEntry.RaceId,
                raceEntry.DriverId,
                raceEntry.CarNumber);

            await httpClient.PutAsJsonAsync($"api/races/{raceId}/entries/{modifiedDriverId}", update);
        }

        disableSave = false;
    }
}
