@page "/races/{RaceId:int}/entries"

@using StartAndPark.Client.Components
@using StartAndPark.Client.Components.Forms
@using StartAndPark.Application
@using StartAndPark.Domain

@inject HttpClient http
@inject NavigationManager navigationManager

<h1>@_race?.Name</h1>
<h3>Driver Entries</h3>

<div class="container-fluid">

    <EditForm Model="@this">
        <div class="card-group">
            @foreach (var tier in _entries.Keys)
            {
                <div class="card bg-light">
                    <div class="card-header">Tier @tier</div>

                    <div class="card-body">
                        <ul class="list-group list-group-flush">
                            @foreach (var driver in _entries[tier])
                            {
                                <li class="list-group-item">@($"{driver.CarNumber} {driver.DriverLastName}")</li>
                            }
                        </ul>
                    </div>
                </div>
            }
            @if (_unassigned.Any())
            {
                <div class="card bg-light">
                    <div class="card-header">Unassigned</div>

                    <div class="card-body">
                        <ul class="list-group list-group-flush">
                            @foreach (var driver in _unassigned)
                            {
                                <li class="list-group-item">
                                    @foreach (var tier in Tier.TIERS)
                                    {
                                        <ActionButton OnClick="@(e => Assign(driver, tier))" ButtonText="@tier" />
                                    }
                                    @($"{driver.CarNumber} {driver.DriverLastName}")
                                </li>
                            }
                        </ul>
                    </div>
                </div>
            }
        </div>
    </EditForm>

</div>

@code {
    [Parameter]
    public int RaceId { get; set; }

    private Race _race;
    private List<DriverRaceEntryDto> _unassigned = new List<DriverRaceEntryDto>();
    private Dictionary<string, List<DriverRaceEntryDto>> _entries = new Dictionary<string, List<DriverRaceEntryDto>>();

    protected override async Task OnInitializedAsync()
    {
        _race = await http.GetFromJsonAsync<Race>($"api/races/{RaceId}");

        var allOptions = await http.GetFromJsonAsync<DriverRaceEntryDto[]>($"api/races/{RaceId}/entries");

        _unassigned = allOptions.Where(x => x.Tier == null).ToList();

        _entries = allOptions
            .Where(x => x.Tier != null)
            .GroupBy(x => x.Tier)
            .ToDictionary(g => g.Key, g => g.ToList());

        await base.OnInitializedAsync();
    }

    private void Assign(DriverRaceEntryDto driver, string tier)
    {
        if (driver == null || tier == null) return;

        _unassigned.Remove(driver);

        if (!_entries.Keys.Contains(tier))
        {
            _entries.Add(tier, new List<DriverRaceEntryDto>());
        }
        _entries[tier].Add(driver);
    }
}
