@using BlazorTable
@using StartAndPark.Client.Components.Forms
@using StartAndPark.Client.Models
@using StartAndPark.Domain
@using StartAndPark.Application

@inject HttpClient httpClient
@inject IMatToaster toaster
@inject IJSRuntime js

<h1>@_race?.Name</h1>
<h3>Owner Picks</h3>

<div class="container-fluid">
    <EditForm Model="@this">
        <Table TableItem="Owner" Items="@_owners" PageSize="100">
            <Column TableItem="Owner" Title="Owner" Field="@(x => x.Name)" />
            @foreach (var tier in Tier.TIERS)
            {
                <Column TableItem="Owner" Title="@tier">
                    <Template Context="owner">
                        <select value="@GetEntryId(owner, tier)"
                                @onchange="e => PickChanged(owner, tier, e)"
                                class="form-control form-control-sm">
                            <option></option>
                            @foreach (var entry in GetEntries(tier))
                            {
                                <option value="@entry.Id">@($"{entry.CarNumber} - {entry.Name}")</option>
                            }
                        </select>
                    </Template>
                </Column>
            }
            <ActionButtonColumn TableItem="Owner" Action="save" OnClick="@Save" />
        </Table>
    </EditForm>

    <ActionButton Action="add" ButtonText="Owner" OnClick="@(_ => AddOwner())" MinimizePadding="false" />
</div>

@code {
    [Parameter]
    public int RaceId { get; set; }

    private Race _race;

    private List<Owner> _owners;

    private List<DriverRaceEntryDto> _allEntries;
    private Dictionary<string, List<DriverRaceEntryDto>> _entriesByTier;

    private Dictionary<int, RacePick> _picks;
    private Dictionary<int, Dictionary<string, int>> _pickTierEntries;

    protected override async Task OnInitializedAsync()
    {
        await LoadItems();

        await base.OnInitializedAsync();
    }

    private async Task LoadItems()
    {
        _race = await httpClient.GetFromJsonAsync<Race>($"api/races/{RaceId}");

        await LoadOwners();

        _allEntries = await httpClient.GetFromJsonAsync<List<DriverRaceEntryDto>>($"api/races/{RaceId}/entries2");
        var entriesByTier = _allEntries.Where(x => x.Tier != null).GroupBy(x => x.Tier)
            .ToDictionary(g => g.Key, g => g.ToList());
        PopulateEntries(entriesByTier);

        var picks = await httpClient.GetFromJsonAsync<List<RacePick>>($"api/races/{RaceId}/picks");
        _picks = picks.ToDictionary(x => x.OwnerId);

        _pickTierEntries = new Dictionary<int, Dictionary<string, int>>(_owners.Count);
        foreach (var ownerPicks in picks)
        {
            var oid = ownerPicks.OwnerId;
            int[] tierPicks = new int[Tier.TIERS.Count];
            foreach (var e in ownerPicks.RaceEntries)
            {
                var t = Tier.TIERS.IndexOf(e.Tier);
                while (tierPicks[t] > 0)
                {
                    t--;
                    if (t < 0)
                    {
                        toaster.Add($"Too many drivers for owner {oid}", MatToastType.Danger);
                        return;
                    }
                }
                tierPicks[t] = e.Id;
            }

            _pickTierEntries.Add(oid, new Dictionary<string, int>(Tier.TIERS.Count));

            for (int i = 0; i < tierPicks.Length; i++)
            {
                _pickTierEntries[oid].Add(Tier.TIERS[i], tierPicks[i]);
            }
        }
    }

    private void PopulateEntries(Dictionary<string, List<DriverRaceEntryDto>> entriesByTier)
    {
        _entriesByTier = new Dictionary<string, List<DriverRaceEntryDto>>(Tier.TIERS.Count);
        var runningList = new List<DriverRaceEntryDto>(Tier.TIERS.Count);
        for (int i = Tier.TIERS.Count - 1; i >= 0; i--)
        {
            string tier = Tier.TIERS[i];
            runningList.AddRange(entriesByTier[tier]);
            _entriesByTier.Add(tier, new List<DriverRaceEntryDto>());
            _entriesByTier[tier].AddRange(runningList.OrderBy(e => Convert.ToInt32(e.CarNumber)));
        }
    }

    private IEnumerable<DriverRaceEntryDto> GetEntries(string tier)
    {
        return (_entriesByTier?.ContainsKey(tier) ?? false) ? _entriesByTier[tier] : new List<DriverRaceEntryDto>();
    }

    private async Task LoadOwners()
    {
        _owners = await httpClient.GetFromJsonAsync<List<Owner>>("api/owners");
    }

    private async Task AddOwner()
    {
        string name = await js.InvokeAsync<string>("prompt", "New owner name");

        if (string.IsNullOrEmpty(name))
        {
            toaster.Add("Empty Name", MatToastType.Danger);
            return;
        }

        if (_owners.Any(x => name.Equals(x.Name)))
        {
            toaster.Add("Duplicate Name", MatToastType.Danger);
            return;
        }

        var response = await httpClient.PostAsJsonAsync("api/owners", new OwnerDto
        {
            Name = name
        });

        if (!response.IsSuccessStatusCode)
        {
            toaster.Add("Save Failed", MatToastType.Danger);
            StateHasChanged();
        }
        else
        {
            toaster.Add($"Added {name}", MatToastType.Success);
            var newOwner = await response.Content.ReadFromJsonAsync<Owner>();
            _owners.Add(newOwner);
        }
    }

    private Owner GetOwner(int id)
    {
        return _owners?.Where(o => o.Id == id)?.FirstOrDefault();
    }

    private void initOwnerPickTier(int ownerId, string tier)
    {
        if (!_pickTierEntries.ContainsKey(ownerId))
        {
            _pickTierEntries.Add(ownerId, new Dictionary<string, int>(Tier.TIERS.Count));
        }
        if (!_pickTierEntries[ownerId].ContainsKey(tier))
        {
            _pickTierEntries[ownerId].Add(tier, 0);
        }
    }

    private int? GetEntryId(Owner o, string tier)
    {
        initOwnerPickTier(o.Id, tier);
        return _pickTierEntries[o.Id][tier];
        //var pick = _picks.ContainsKey(o.Id) ? _picks[o.Id] : null;
        //var entry = pick?.RaceEntries?.Where(x => x.Tier == tier)?.FirstOrDefault();
        //return entry?.Id;
    }

    private async Task PickChanged(Owner o, string tier, ChangeEventArgs e)
    {
        initOwnerPickTier(o.Id, tier);
        int oldEntryId = _pickTierEntries[o.Id][tier];

        int newEntryId = int.TryParse(e.Value.ToString(), out int i) ? i : 0;

        _pickTierEntries[o.Id][tier] = newEntryId;
        return;

        //if (oldEntryId == newEntryId)
        //{
        //    toaster.Add($"Same Pick, nothing to update", MatToastType.Warning);
        //}

        //var cmd = new SetRacePickCommand(o.Id, RaceId, tier, newEntryId, oldEntryId);

        ////toaster.Add($"SetRacePickCommand {e.Value.GetType().Name} {e.Value} should equal {entryId}", MatToastType.Info);

        //var response = await httpClient.PutAsJsonAsync($"api/owners/{o.Id}/picks", cmd);

        //if (!response.IsSuccessStatusCode)
        //{
        //    toaster.Add($"Update Failed for {o.Name} tier {tier} entry {newEntryId}", MatToastType.Danger);
        //}
        //else
        //{
        //    toaster.Add($"Saved Pick", MatToastType.Success);
        //}

        //StateHasChanged();
    }

    private async Task Save(Owner o)
    {
        var pickedEntryIds = _pickTierEntries[o.Id].Select(x => x.Value).ToList();
        var cmd = new SetRacePickCommand(o.Id, RaceId, pickedEntryIds);
        var response = await httpClient.PutAsJsonAsync($"api/owners/{o.Id}/picks", cmd);

        if (!response.IsSuccessStatusCode)
        {
            toaster.Add($"Update Failed for {o.Name}", MatToastType.Danger);
        }
        else
        {
            toaster.Add($"Saved Picks for {o.Name}", MatToastType.Success);
        }
    }
} 