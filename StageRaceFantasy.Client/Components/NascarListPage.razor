@using BlazorTable
@using StartAndPark.Client.Components.Forms
@using System.Linq.Expressions
@using System.Text.Json;
@using System.Text.Json.Serialization;
@using System.Diagnostics; 

@inject NavigationManager _navigationManager
@inject HttpClient httpClient
@inject IJSRuntime js

@typeparam TItem

<p>
    <span class="h1">@Title</span>

    @*<ActionButton Action="add" ButtonText="New" OnClick="Add" MinimizePadding="false" CssClass="float-right" />*@
</p>

@if (Items == null)
{
    <Loader />
}
@*else
{
    @foreach (var item in (Items as JsonElement[]))
    {
        var wd = item.GetProperty("winner_driver_id");
        <span>winner: @wd.GetRawText()</span>
        <span> isnull? @(string.IsNullOrEmpty(wd.ToString()))</span>
        <br />
    }
}*@

<div class="table-selectable">
    <Table TableItem="TItem" Items="@Items" PageSize="@PageSize" ShowSearchBar="false"
           RowClickAction="@(RowClickAction)">
        @*<Column TableItem="TItem" Title="Id" Field="@IdField" Width="5%" />*@

        @*<ActionButtonColumn TableItem="TItem" Action="edit" OnClick="@Edit" />*@

        @*<ActionButtonColumn TableItem="TItem" Action="delete" OnClick="@Delete" />*@

        @ChildContent

        <Pager ShowPageNumber="true" ShowTotalCount="true" />

        <EmptyDataTemplate><div class="text-center">@($"none found")</div></EmptyDataTemplate>
    </Table>
</div>

@_dumper

@code {
    /// <summary>
    /// how many items per page
    /// </summary>
    [Parameter]
    public int PageSize { get; set; } = 100;

    /// <summary>
    /// the display title for this list page
    /// </summary>
    [Parameter]
    public string @Title { get; set; }

    /// <summary>
    /// the expression for getting the ID of each item in the list
    /// </summary>
    [Parameter]
    public Expression<Func<TItem, object>> IdField { get; set; }

    /// <summary>
    /// the expression for getting the desired display name of each item in the list
    /// </summary>
    [Parameter]
    public Expression<Func<TItem, object>> NameField { get; set; }

    /// <summary>
    /// an optional string title for the NameField (e.g. Description), defaults to "Name"
    /// </summary>
    [Parameter]
    public string NameFieldTitle { get; set; } = "Name";

    /// <summary>
    /// UI (html) segment to render additional columns into the list table
    /// </summary>
    [Parameter]
    public RenderFragment ChildContent { get; set; }

    [Parameter]
    public string DataUrl { get; set; }

    [Parameter]
    public Action<TItem> RowClickAction { get; set; }


    // the full item list for this list view
    protected TItem[] Items { get; set; }

    private object _dumper;


    protected override async Task OnInitializedAsync()
    {
        await LoadItems();
    }

    protected async Task LoadItems()
    {
        JsonSerializerOptions options = new()
        {
            NumberHandling = JsonNumberHandling.AllowReadingFromString
        };
        try
        {
            Items = await httpClient.GetFromJsonAsync<TItem[]>(DataUrl, options);
        }
        catch (Exception je)
        {
            Debug.WriteLine(je.Message);
            throw;
            
        }
    }

    // create a new item
    //private void Add()
    //{
    //    // just invokes the editor with an ID of 0
    //    _navigationManager.NavigateTo(GetEditorPath(id: null));
    //}

    // edit the selected item
    //private void Edit(TItem item)
    //{
    //    if (item == null) return;

    //    _navigationManager.NavigateTo(GetEditorPath(item));
    //}

    //private async Task Delete(TItem item)
    //{
    //    if (await js.InvokeAsync<bool>("confirm", $"Do you want to delete {GetItemName(item)}?"))
    //    {
    //        await httpClient.DeleteAsync($"api/{GetEditorPath(item)}");
    //        await LoadItems();
    //    }
    //}

    //private string GetEditorPath(TItem item)
    //{
    //    if (item == null) throw new ArgumentNullException(nameof(item));

    //    return GetEditorPath(GetItemId(item));
    //}

    // put together the right navigation path for editing the given item ID
    //private string GetEditorPath(int? id)
    //{
    //    return $"/{DataUrl.Trim()}/{(id.HasValue ? id : 0)}";
    //}

    private int GetItemId(TItem item)
    {
        if (item == null) return 0;

        var id = IdField?.Compile()?.Invoke(item) as int?;

        return id ?? 0;
    }

    // get the display name for a single item in the list
    private string GetItemName(TItem item)
    {
        if (item == null) return null;

        return NameField?.Compile()?.Invoke(item)?.ToString();
    }
}
