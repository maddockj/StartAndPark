<div class="input-group input-group-sm @ContainerClass" style="@ContainerStyle">
    <div class="input-group-prepend">
        <div class="input-group-text @_disabledClass" @onclick="@ToggleValue" style="cursor:pointer">
            @Label
        </div>
    </div>

    <div class="input-group-append">
        <div class="input-group-text">
            @if (Disabled)
            {
                <input type="checkbox" @bind="@Value" disabled />
            }
            else
            {
                <InputCheckbox @bind-Value="@Value" />
            }
        </div>
    </div>
</div>

@code {
    private bool _value;

    /// <summary>
    /// label text for this checkbox
    /// </summary>
    [Parameter]
    public string Label { get; set; }

    /// <summary>
    /// optional class string to add on to the input-group div
    /// </summary>
    [Parameter]
    public string ContainerClass { get; set; }

    /// <summary>
    /// optional css style to apply to the input-group div
    /// </summary>
    [Parameter]
    public string ContainerStyle { get; set; }

    /// <summary>
    /// should this component be disabled and greyed out?
    /// optional parameter, defaults to false (i.e. enabled)
    /// </summary>
    [Parameter]
    public bool Disabled { get; set; } = false;

    /// <summary>
    /// the boolean value indicated by the checkbox
    /// </summary>
    [Parameter]
    public bool Value
    {
        get => _value;
        set
        {
            if (_value == value) return;

            _value = value;

            if (ValueChanged.HasDelegate)
            {
                ValueChanged.InvokeAsync(Value);
            }
        }
    }

    [Parameter]
    public EventCallback<bool> ValueChanged { get; set; }

    // private convenience property to grey out label if disabled
    private string _disabledClass => Disabled ? "text-muted" : "";

    private void ToggleValue()
    {
        // change value if this component is not disabled
        if (!Disabled)
        {
            Value = !Value;
        }
    }
}
